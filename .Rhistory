demo()
image
demo("image")
getdata.data.GDP <- read.csv("~/Downloads/getdata-data-GDP.csv", header=F)
View(getdata.data.GDP)
d <- getdata.data.GDP
gsub(",", "", d$V5)
d$V% <- gsub(",", "", d$V5)
d$V5 <- gsub(",", "", d$V5)
View(d)
d$V5 <- as.numeric(d$V5)
mean(d$V5)
mean(d$V5,na.action=na.omit)
mean(d$V5,na.action=na.pass)
NA
mean(d$V5,na.rm = TRUE)
d <- read.csv("~/Downloads/getdata-data-GDP.csv", header=F)
View(d)
d$V5 <- gsub(",", "", d$V5)
d$V5 <- as.numeric(d$V5)
View(d)
mean(d$V5,na.rm = TRUE)
d.n <- d$V4
grep("United$",d.a)
grep("United$",d.n)
grep("*United",d.n)
d[grep("*United",d.n)]
d[grep("*United",d.n),]
d[grep("^United",d.n),]
getdata.data.EDSTATS_Country <- read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
View(getdata.data.EDSTATS_Country)
grep("*Fiscal year end:",getdata.data.EDSTATS_Country$Special.Notes)
grep("*Fiscal year end: June",getdata.data.EDSTATS_Country$Special.Notes)
library(quantmod)
require(quantmod)
install.packages("quantmod")
require(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
grep("^2012",sampleTimes)
count(grep("^2012",sampleTimes))
table(grep("^2012",sampleTimes))
length(grep("^2012",sampleTimes))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
Diet
BodyWeight
str(BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
trellis.par.set?
dc
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(lattice)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
??qplot
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages(gplot)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
r <- 4L
class(r)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
class(rbind(x, y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
type(x[[2]])
object(x[[2]])
?class
mode(x[[2]])
class x[2]
class (x[2])
x[2]
x <- 1:4
y <- 3:5
x+y
y <- 2:3
x+y
x
y
hw1_data <- read.csv("~/Dropbox/coursera/hw1_data.csv")
View(hw1_data)
hw1_data[1:2,]
hw1_data[0:2,]
hw1_data[1:2,]
dim(hw1_data)
hw1_data[-2,]
hw1_data[152,153,]
hw1_data[152:153,]
hw1_data[47,]
hw1_data[47,1]
sum(is.na(hw1_data[,1]))
sum(is.nan(hw1_data[,1]))
mean(hw1_data[,1], na.action=IGNORE)
mean(hw1_data[,1])
?mean
mean(hw1_data[,1], na.rm=TRUE)
hw1_data[hw1_data$Ozone>31,]
hw1_data[hw1_data$Ozone>31 && hw1_data$Temp>90,]
hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>90,]
mean(hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>90,2]
)
mean(hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>90,2], na.rm=TRUE)
mean(hw1_data[hw1_data$Month == 6]$Temp)
mean(hw1_data[hw1_data$Month == 6,]$Temp)
max(hw1_data[hw1_data$Month == 5,]$Ozone)
max(hw1_data[hw1_data$Month == 5,]$Ozone, na.rm=TRUE)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
dim(cbind(x,y))
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
iris
mean(iris$Sepal.Length[iris$Species == 'viginica'])
mean(iris$Sepal.Length[iris$Species == 'viginica'], na.rm=TRUE)
mean(iris$Sepal.Length[iris$Species == 'virginica'], na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls
ls()
?
d
q
?
q
q
>
?
wf
solve
?solve
set.seed(1)
rpois(5, 2)
?rnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 = nrand(100)
x1 = rnorm(100)
x2 = rnorm(100)
y= x1+x2*10
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
summaryRprof()
x2 = rnorm(1000)
x2 = rnorm(1000)
y= x1+x2*10
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x2 = rnorm(1000)
x1 = rnorm(1000)
x2 = rnorm(1000)
y= x1+x2*10
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
summaryRprof()
Rprof(NULL)
summaryRprof()
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
t.test(a, b, alternative = "two.sided", paired = T)
round(pbinom(2,size=4,prob=0.5,lower.tail=FALSE),2)
pbinom (3,size=4,prob = 0.5)
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)
t=(x1-x2)/(spsq*sqrt(1/n1 + 1/n2))
2*pt(t,n1+n2-2)
(qnorm(.95) + qnorm(.9))^2 * .04^2 / .01^2
round( (qnorm(0.95) + qnorm(0.90))^2 * 0.04^2 / (0.01^2) )
(qnorm(.95) + qnorm(.9))^2 * .04^2 / .01^2
smm=sqrt(12^2/288 + 12^2/288)
12^2/288
x=44
y=42.04
sx=12
sy=12
n1=288
n2=288
SDpooled <- sqrt( ((n1 - 1) * sx^2 + (n2-1) * sy^2) / (n1 + n2 -2))
SE_est= sqrt(SDpooled^2/n1 + SDpooled^2/n2)
2*pnorm((44-42.04),lower.tail=F)
install.packages(knit)
install.packages("knit")
setwd("~/Dropbox/DataScienceWiki/Forecast_knit")
update.packages(ask=FALSE)
install.packages('scales')
install.packages('ggplot2')
install.packages('forecast')
install.packages('TSA')
install.packages('TSA')
install.packages("forecast")
install.packages('TSA')
install.packages("forecast")
defaults write org.R-project.R force.LANG en_US.UTF-8
